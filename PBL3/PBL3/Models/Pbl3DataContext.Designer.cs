//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 5/21/2022 9:50:23 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace Pbl3Context
{

    [DatabaseAttribute(Name = "pbl3")]
    [ProviderAttribute(typeof(Devart.Data.MySql.Linq.Provider.MySqlDataProvider))]
    public partial class Pbl3DataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(Pbl3DataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertCart(Cart instance);
        partial void UpdateCart(Cart instance);
        partial void DeleteCart(Cart instance);
        partial void InsertCartdetail(Cartdetail instance);
        partial void UpdateCartdetail(Cartdetail instance);
        partial void DeleteCartdetail(Cartdetail instance);
        partial void InsertCategory(Category instance);
        partial void UpdateCategory(Category instance);
        partial void DeleteCategory(Category instance);
        partial void InsertCreditcard(Creditcard instance);
        partial void UpdateCreditcard(Creditcard instance);
        partial void DeleteCreditcard(Creditcard instance);
        partial void InsertImage(Image instance);
        partial void UpdateImage(Image instance);
        partial void DeleteImage(Image instance);
        partial void InsertOrderdetail(Orderdetail instance);
        partial void UpdateOrderdetail(Orderdetail instance);
        partial void DeleteOrderdetail(Orderdetail instance);
        partial void InsertOrderr(Orderr instance);
        partial void UpdateOrderr(Orderr instance);
        partial void DeleteOrderr(Orderr instance);
        partial void InsertPayment(Payment instance);
        partial void UpdatePayment(Payment instance);
        partial void DeletePayment(Payment instance);
        partial void InsertPerson(Person instance);
        partial void UpdatePerson(Person instance);
        partial void DeletePerson(Person instance);
        partial void InsertProduct(Product instance);
        partial void UpdateProduct(Product instance);
        partial void DeleteProduct(Product instance);
        partial void InsertRole(Role instance);
        partial void UpdateRole(Role instance);
        partial void DeleteRole(Role instance);
        partial void InsertTrademark(Trademark instance);
        partial void UpdateTrademark(Trademark instance);
        partial void DeleteTrademark(Trademark instance);
        partial void InsertUser(User instance);
        partial void UpdateUser(User instance);
        partial void DeleteUser(User instance);

        #endregion

        public Pbl3DataContext() :
        base(GetConnectionString("Pbl3DataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public Pbl3DataContext(MappingSource mappingSource) :
        base(GetConnectionString("Pbl3DataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public Pbl3DataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Pbl3DataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Pbl3DataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Pbl3DataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Cart> Carts
        {
            get
            {
                return this.GetTable<Cart>();
            }
        }

        public Devart.Data.Linq.Table<Cartdetail> Cartdetails
        {
            get
            {
                return this.GetTable<Cartdetail>();
            }
        }

        public Devart.Data.Linq.Table<Category> Categories
        {
            get
            {
                return this.GetTable<Category>();
            }
        }

        public Devart.Data.Linq.Table<Creditcard> Creditcards
        {
            get
            {
                return this.GetTable<Creditcard>();
            }
        }

        public Devart.Data.Linq.Table<Image> Images
        {
            get
            {
                return this.GetTable<Image>();
            }
        }

        public Devart.Data.Linq.Table<Orderdetail> Orderdetails
        {
            get
            {
                return this.GetTable<Orderdetail>();
            }
        }

        public Devart.Data.Linq.Table<Orderr> Orderrs
        {
            get
            {
                return this.GetTable<Orderr>();
            }
        }

        public Devart.Data.Linq.Table<Payment> Payments
        {
            get
            {
                return this.GetTable<Payment>();
            }
        }

        public Devart.Data.Linq.Table<Person> People
        {
            get
            {
                return this.GetTable<Person>();
            }
        }

        public Devart.Data.Linq.Table<Product> Products
        {
            get
            {
                return this.GetTable<Product>();
            }
        }

        public Devart.Data.Linq.Table<Role> Roles
        {
            get
            {
                return this.GetTable<Role>();
            }
        }

        public Devart.Data.Linq.Table<Trademark> Trademarks
        {
            get
            {
                return this.GetTable<Trademark>();
            }
        }

        public Devart.Data.Linq.Table<User> Users
        {
            get
            {
                return this.GetTable<User>();
            }
        }

    
        /// <summary>
        /// There are no comments for CreateNewUser in the schema.
        /// </summary>
        [Function(Name=@"pbl3.Create_New_User")]
        public void CreateNewUser([Parameter(Name="name", DbType="VARCHAR(255)")] string name, [Parameter(Name="sex", DbType="ENUM")] string sex, [Parameter(Name="phone", DbType="INT(10)")] int? phone, [Parameter(Name="address", DbType="VARCHAR(255)")] string address, [Parameter(Name="username", DbType="VARCHAR(255)")] string username, [Parameter(Name="emailn", DbType="VARCHAR(255)")] string emailn, [Parameter(Name="password", DbType="VARCHAR(255)")] string password, [Parameter(Name="status", DbType="VARCHAR(255)")] string status, [Parameter(Name="Idrole", DbType="INT(10)")] int? Idrole)
        {
            IExecuteResult _CreateNewUserResult = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name, sex, phone, address, username, emailn, password, status, Idrole);
        }
    }
}

namespace Pbl3Context
{

    /// <summary>
    /// There are no comments for Pbl3Context.Cart in the schema.
    /// </summary>
    [Table(Name = @"pbl3.cart")]
    public partial class Cart : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int? _QuantityBuy;

        private int _UserId;
        #pragma warning restore 0649

        private EntityRef<User> _User;

        private EntitySet<Cartdetail> _Cartdetails;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnQuantityBuyChanging(int? value);
        partial void OnQuantityBuyChanged();
        partial void OnUserIdChanging(int value);
        partial void OnUserIdChanged();
        #endregion

        public Cart()
        {
            this._User  = default(EntityRef<User>);
            this._Cartdetails = new EntitySet<Cartdetail>(new Action<Cartdetail>(this.attach_Cartdetails), new Action<Cartdetail>(this.detach_Cartdetails));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for QuantityBuy in the schema.
        /// </summary>
        [Column(Name = @"quantityBuy", Storage = "_QuantityBuy", DbType = "INT NULL", UpdateCheck = UpdateCheck.Never)]
        public int? QuantityBuy
        {
            get
            {
                return this._QuantityBuy;
            }
            set
            {
                if (this._QuantityBuy != value)
                {
                    this.OnQuantityBuyChanging(value);
                    this.SendPropertyChanging("QuantityBuy");
                    this._QuantityBuy = value;
                    this.SendPropertyChanged("QuantityBuy");
                    this.OnQuantityBuyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserId in the schema.
        /// </summary>
        [Column(Name = @"userId", Storage = "_UserId", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if (this._UserId != value)
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging("UserId");
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for User in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_Cart", Storage="_User", ThisKey="UserId", OtherKey="ID", IsForeignKey=true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if ((previousValue != value) || (this._User.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("User");
                    if (previousValue != null)
                    {
                        this._User.Entity = null;
                        previousValue.Cart = null;
                    }
                    this._User.Entity = value;
                    if (value != null)
                    {
                        this._UserId = value.ID;
                        value.Cart = this;
                    }
                    else
                    {
                        this._UserId = default(int);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cartdetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Cart_Cartdetail", Storage="_Cartdetails", ThisKey="UserId", OtherKey="CartId", DeleteRule="NO ACTION")]
        public EntitySet<Cartdetail> Cartdetails
        {
            get
            {
                return this._Cartdetails;
            }
            set
            {
                this._Cartdetails.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Cartdetails(Cartdetail entity)
        {
            this.SendPropertyChanging("Cartdetails");
            entity.Cart = this;
        }
    
        private void detach_Cartdetails(Cartdetail entity)
        {
            this.SendPropertyChanging("Cartdetails");
            entity.Cart = null;
        }
    }

    /// <summary>
    /// There are no comments for Pbl3Context.Cartdetail in the schema.
    /// </summary>
    [Table(Name = @"pbl3.cartdetail")]
    public partial class Cartdetail : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int? _CartId;

        private int _Id;

        private int? _ProductId;

        private int? _QuantityBuy;
        #pragma warning restore 0649

        private EntityRef<Cart> _Cart;

        private EntityRef<Product> _Product;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCartIdChanging(int? value);
        partial void OnCartIdChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnProductIdChanging(int? value);
        partial void OnProductIdChanged();
        partial void OnQuantityBuyChanging(int? value);
        partial void OnQuantityBuyChanged();
        #endregion

        public Cartdetail()
        {
            this._Cart  = default(EntityRef<Cart>);
            this._Product  = default(EntityRef<Product>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CartId in the schema.
        /// </summary>
        [Column(Name = @"cartId", Storage = "_CartId", DbType = "INT NULL", UpdateCheck = UpdateCheck.Never)]
        public int? CartId
        {
            get
            {
                return this._CartId;
            }
            set
            {
                if (this._CartId != value)
                {
                    if (this._Cart.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCartIdChanging(value);
                    this.SendPropertyChanging("CartId");
                    this._CartId = value;
                    this.SendPropertyChanged("CartId");
                    this.OnCartIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"productId", Storage = "_ProductId", DbType = "INT NULL", UpdateCheck = UpdateCheck.Never)]
        public int? ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    if (this._Product.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging("ProductId");
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for QuantityBuy in the schema.
        /// </summary>
        [Column(Name = @"quantityBuy", Storage = "_QuantityBuy", DbType = "INT NULL", UpdateCheck = UpdateCheck.Never)]
        public int? QuantityBuy
        {
            get
            {
                return this._QuantityBuy;
            }
            set
            {
                if (this._QuantityBuy != value)
                {
                    this.OnQuantityBuyChanging(value);
                    this.SendPropertyChanging("QuantityBuy");
                    this._QuantityBuy = value;
                    this.SendPropertyChanged("QuantityBuy");
                    this.OnQuantityBuyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cart in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Cart_Cartdetail", Storage="_Cart", ThisKey="CartId", OtherKey="UserId", IsForeignKey=true)]
        public Cart Cart
        {
            get
            {
                return this._Cart.Entity;
            }
            set
            {
                Cart previousValue = this._Cart.Entity;
                if ((previousValue != value) || (this._Cart.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Cart");
                    if (previousValue != null)
                    {
                        this._Cart.Entity = null;
                        previousValue.Cartdetails.Remove(this);
                    }
                    this._Cart.Entity = value;
                    if (value != null)
                    {
                        this._CartId = value.UserId;
                        value.Cartdetails.Add(this);
                    }
                    else
                    {
                        this._CartId = default(int?);
                    }
                    this.SendPropertyChanged("Cart");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Product in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Product_Cartdetail", Storage="_Product", ThisKey="ProductId", OtherKey="Id", IsForeignKey=true)]
        public Product Product
        {
            get
            {
                return this._Product.Entity;
            }
            set
            {
                Product previousValue = this._Product.Entity;
                if ((previousValue != value) || (this._Product.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Product");
                    if (previousValue != null)
                    {
                        this._Product.Entity = null;
                        previousValue.Cartdetails.Remove(this);
                    }
                    this._Product.Entity = value;
                    if (value != null)
                    {
                        this._ProductId = value.Id;
                        value.Cartdetails.Add(this);
                    }
                    else
                    {
                        this._ProductId = default(int?);
                    }
                    this.SendPropertyChanged("Product");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Pbl3Context.Category in the schema.
    /// </summary>
    [Table(Name = @"pbl3.category")]
    public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _Name;

        private string _PartOfBody;
        #pragma warning restore 0649

        private EntitySet<Product> _Products;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPartOfBodyChanging(string value);
        partial void OnPartOfBodyChanged();
        #endregion

        public Category()
        {
            this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", DbType = "VARCHAR(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PartOfBody in the schema.
        /// </summary>
        [Column(Storage = "_PartOfBody", DbType = "VARCHAR(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string PartOfBody
        {
            get
            {
                return this._PartOfBody;
            }
            set
            {
                if (this._PartOfBody != value)
                {
                    this.OnPartOfBodyChanging(value);
                    this.SendPropertyChanging("PartOfBody");
                    this._PartOfBody = value;
                    this.SendPropertyChanged("PartOfBody");
                    this.OnPartOfBodyChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Products in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Category_Product", Storage="_Products", ThisKey="Id", OtherKey="CategoryId", DeleteRule="NO ACTION")]
        public EntitySet<Product> Products
        {
            get
            {
                return this._Products;
            }
            set
            {
                this._Products.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Products(Product entity)
        {
            this.SendPropertyChanging("Products");
            entity.Category = this;
        }
    
        private void detach_Products(Product entity)
        {
            this.SendPropertyChanging("Products");
            entity.Category = null;
        }
    }

    /// <summary>
    /// There are no comments for Pbl3Context.Creditcard in the schema.
    /// </summary>
    [Table(Name = @"pbl3.creditcard")]
    public partial class Creditcard : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int? _CardNumber;

        private int _Id;

        private string _Name;
        #pragma warning restore 0649

        private EntitySet<Payment> _Payments;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCardNumberChanging(int? value);
        partial void OnCardNumberChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public Creditcard()
        {
            this._Payments = new EntitySet<Payment>(new Action<Payment>(this.attach_Payments), new Action<Payment>(this.detach_Payments));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CardNumber in the schema.
        /// </summary>
        [Column(Name = @"cardNumber", Storage = "_CardNumber", DbType = "INT NULL", UpdateCheck = UpdateCheck.Never)]
        public int? CardNumber
        {
            get
            {
                return this._CardNumber;
            }
            set
            {
                if (this._CardNumber != value)
                {
                    this.OnCardNumberChanging(value);
                    this.SendPropertyChanging("CardNumber");
                    this._CardNumber = value;
                    this.SendPropertyChanged("CardNumber");
                    this.OnCardNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", DbType = "VARCHAR(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Payments in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Creditcard_Payment", Storage="_Payments", ThisKey="Id", OtherKey="CreaditCardId", DeleteRule="NO ACTION")]
        public EntitySet<Payment> Payments
        {
            get
            {
                return this._Payments;
            }
            set
            {
                this._Payments.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Payments(Payment entity)
        {
            this.SendPropertyChanging("Payments");
            entity.Creditcard = this;
        }
    
        private void detach_Payments(Payment entity)
        {
            this.SendPropertyChanging("Payments");
            entity.Creditcard = null;
        }
    }

    /// <summary>
    /// There are no comments for Pbl3Context.Image in the schema.
    /// </summary>
    [Table(Name = @"pbl3.image")]
    public partial class Image : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _Name;

        private int? _ProductId;
        #pragma warning restore 0649

        private EntityRef<Product> _Product;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnProductIdChanging(int? value);
        partial void OnProductIdChanged();
        #endregion

        public Image()
        {
            this._Product  = default(EntityRef<Product>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", DbType = "VARCHAR(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"productId", Storage = "_ProductId", DbType = "INT NULL", UpdateCheck = UpdateCheck.Never)]
        public int? ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    if (this._Product.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging("ProductId");
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Product in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Product_Image", Storage="_Product", ThisKey="ProductId", OtherKey="Id", IsForeignKey=true)]
        public Product Product
        {
            get
            {
                return this._Product.Entity;
            }
            set
            {
                Product previousValue = this._Product.Entity;
                if ((previousValue != value) || (this._Product.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Product");
                    if (previousValue != null)
                    {
                        this._Product.Entity = null;
                        previousValue.Images.Remove(this);
                    }
                    this._Product.Entity = value;
                    if (value != null)
                    {
                        this._ProductId = value.Id;
                        value.Images.Add(this);
                    }
                    else
                    {
                        this._ProductId = default(int?);
                    }
                    this.SendPropertyChanged("Product");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Pbl3Context.Orderdetail in the schema.
    /// </summary>
    [Table(Name = @"pbl3.orderdetail")]
    public partial class Orderdetail : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _Name;

        private int? _OrderId;

        private float? _Price;

        private int? _ProductId;

        private int? _Quantity;
        #pragma warning restore 0649

        private EntityRef<Orderr> _Orderr;

        private EntityRef<Product> _Product;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnOrderIdChanging(int? value);
        partial void OnOrderIdChanged();
        partial void OnPriceChanging(float? value);
        partial void OnPriceChanged();
        partial void OnProductIdChanging(int? value);
        partial void OnProductIdChanged();
        partial void OnQuantityChanging(int? value);
        partial void OnQuantityChanged();
        #endregion

        public Orderdetail()
        {
            this._Orderr  = default(EntityRef<Orderr>);
            this._Product  = default(EntityRef<Product>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", DbType = "VARCHAR(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderId in the schema.
        /// </summary>
        [Column(Name = @"orderId", Storage = "_OrderId", DbType = "INT NULL", UpdateCheck = UpdateCheck.Never)]
        public int? OrderId
        {
            get
            {
                return this._OrderId;
            }
            set
            {
                if (this._OrderId != value)
                {
                    if (this._Orderr.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnOrderIdChanging(value);
                    this.SendPropertyChanging("OrderId");
                    this._OrderId = value;
                    this.SendPropertyChanged("OrderId");
                    this.OnOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [Column(Name = @"price", Storage = "_Price", DbType = "FLOAT NULL", UpdateCheck = UpdateCheck.Never)]
        public float? Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging("Price");
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [Column(Name = @"productId", Storage = "_ProductId", DbType = "INT NULL", UpdateCheck = UpdateCheck.Never)]
        public int? ProductId
        {
            get
            {
                return this._ProductId;
            }
            set
            {
                if (this._ProductId != value)
                {
                    if (this._Product.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductIdChanging(value);
                    this.SendPropertyChanging("ProductId");
                    this._ProductId = value;
                    this.SendPropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"quantity", Storage = "_Quantity", DbType = "INT NULL", UpdateCheck = UpdateCheck.Never)]
        public int? Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging("Quantity");
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Orderr in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Orderr_Orderdetail", Storage="_Orderr", ThisKey="OrderId", OtherKey="Id", IsForeignKey=true)]
        public Orderr Orderr
        {
            get
            {
                return this._Orderr.Entity;
            }
            set
            {
                Orderr previousValue = this._Orderr.Entity;
                if ((previousValue != value) || (this._Orderr.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Orderr");
                    if (previousValue != null)
                    {
                        this._Orderr.Entity = null;
                        previousValue.Orderdetails.Remove(this);
                    }
                    this._Orderr.Entity = value;
                    if (value != null)
                    {
                        this._OrderId = value.Id;
                        value.Orderdetails.Add(this);
                    }
                    else
                    {
                        this._OrderId = default(int?);
                    }
                    this.SendPropertyChanged("Orderr");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Product in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Product_Orderdetail", Storage="_Product", ThisKey="ProductId", OtherKey="Id", IsForeignKey=true)]
        public Product Product
        {
            get
            {
                return this._Product.Entity;
            }
            set
            {
                Product previousValue = this._Product.Entity;
                if ((previousValue != value) || (this._Product.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Product");
                    if (previousValue != null)
                    {
                        this._Product.Entity = null;
                        previousValue.Orderdetails.Remove(this);
                    }
                    this._Product.Entity = value;
                    if (value != null)
                    {
                        this._ProductId = value.Id;
                        value.Orderdetails.Add(this);
                    }
                    else
                    {
                        this._ProductId = default(int?);
                    }
                    this.SendPropertyChanged("Product");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Pbl3Context.Orderr in the schema.
    /// </summary>
    [Table(Name = @"pbl3.orderr")]
    public partial class Orderr : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _Name;

        private string _Status;

        private int? _UserId;
        #pragma warning restore 0649

        private EntitySet<Orderdetail> _Orderdetails;

        private EntityRef<User> _User;

        private EntitySet<Payment> _Payments;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnUserIdChanging(int? value);
        partial void OnUserIdChanged();
        #endregion

        public Orderr()
        {
            this._Orderdetails = new EntitySet<Orderdetail>(new Action<Orderdetail>(this.attach_Orderdetails), new Action<Orderdetail>(this.detach_Orderdetails));
            this._User  = default(EntityRef<User>);
            this._Payments = new EntitySet<Payment>(new Action<Payment>(this.attach_Payments), new Action<Payment>(this.detach_Payments));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", DbType = "VARCHAR(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", DbType = "ENUM NULL", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserId in the schema.
        /// </summary>
        [Column(Name = @"userId", Storage = "_UserId", DbType = "INT NULL", UpdateCheck = UpdateCheck.Never)]
        public int? UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if (this._UserId != value)
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging("UserId");
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Orderdetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Orderr_Orderdetail", Storage="_Orderdetails", ThisKey="Id", OtherKey="OrderId", DeleteRule="NO ACTION")]
        public EntitySet<Orderdetail> Orderdetails
        {
            get
            {
                return this._Orderdetails;
            }
            set
            {
                this._Orderdetails.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for User in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_Orderr", Storage="_User", ThisKey="UserId", OtherKey="ID", IsForeignKey=true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if ((previousValue != value) || (this._User.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("User");
                    if (previousValue != null)
                    {
                        this._User.Entity = null;
                        previousValue.Orderrs.Remove(this);
                    }
                    this._User.Entity = value;
                    if (value != null)
                    {
                        this._UserId = value.ID;
                        value.Orderrs.Add(this);
                    }
                    else
                    {
                        this._UserId = default(int?);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Payments in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Orderr_Payment", Storage="_Payments", ThisKey="Id", OtherKey="OrderId", DeleteRule="NO ACTION")]
        public EntitySet<Payment> Payments
        {
            get
            {
                return this._Payments;
            }
            set
            {
                this._Payments.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Orderdetails(Orderdetail entity)
        {
            this.SendPropertyChanging("Orderdetails");
            entity.Orderr = this;
        }
    
        private void detach_Orderdetails(Orderdetail entity)
        {
            this.SendPropertyChanging("Orderdetails");
            entity.Orderr = null;
        }

        private void attach_Payments(Payment entity)
        {
            this.SendPropertyChanging("Payments");
            entity.Orderr = this;
        }
    
        private void detach_Payments(Payment entity)
        {
            this.SendPropertyChanging("Payments");
            entity.Orderr = null;
        }
    }

    /// <summary>
    /// There are no comments for Pbl3Context.Payment in the schema.
    /// </summary>
    [Table(Name = @"pbl3.payment")]
    public partial class Payment : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int? _Amount;

        private int? _CreaditCardId;

        private int _Id;

        private int? _OrderId;

        private System.DateTime? _PaymentDate;

        private float? _TotalPrice;
        #pragma warning restore 0649

        private EntityRef<Orderr> _Orderr;

        private EntityRef<Creditcard> _Creditcard;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnAmountChanging(int? value);
        partial void OnAmountChanged();
        partial void OnCreaditCardIdChanging(int? value);
        partial void OnCreaditCardIdChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnOrderIdChanging(int? value);
        partial void OnOrderIdChanged();
        partial void OnPaymentDateChanging(System.DateTime? value);
        partial void OnPaymentDateChanged();
        partial void OnTotalPriceChanging(float? value);
        partial void OnTotalPriceChanged();
        #endregion

        public Payment()
        {
            this._Orderr  = default(EntityRef<Orderr>);
            this._Creditcard  = default(EntityRef<Creditcard>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Amount in the schema.
        /// </summary>
        [Column(Name = @"amount", Storage = "_Amount", DbType = "INT NULL", UpdateCheck = UpdateCheck.Never)]
        public int? Amount
        {
            get
            {
                return this._Amount;
            }
            set
            {
                if (this._Amount != value)
                {
                    this.OnAmountChanging(value);
                    this.SendPropertyChanging("Amount");
                    this._Amount = value;
                    this.SendPropertyChanged("Amount");
                    this.OnAmountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreaditCardId in the schema.
        /// </summary>
        [Column(Name = @"creaditCardId", Storage = "_CreaditCardId", DbType = "INT NULL", UpdateCheck = UpdateCheck.Never)]
        public int? CreaditCardId
        {
            get
            {
                return this._CreaditCardId;
            }
            set
            {
                if (this._CreaditCardId != value)
                {
                    if (this._Creditcard.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCreaditCardIdChanging(value);
                    this.SendPropertyChanging("CreaditCardId");
                    this._CreaditCardId = value;
                    this.SendPropertyChanged("CreaditCardId");
                    this.OnCreaditCardIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrderId in the schema.
        /// </summary>
        [Column(Name = @"orderId", Storage = "_OrderId", DbType = "INT NULL", UpdateCheck = UpdateCheck.Never)]
        public int? OrderId
        {
            get
            {
                return this._OrderId;
            }
            set
            {
                if (this._OrderId != value)
                {
                    if (this._Orderr.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnOrderIdChanging(value);
                    this.SendPropertyChanging("OrderId");
                    this._OrderId = value;
                    this.SendPropertyChanged("OrderId");
                    this.OnOrderIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PaymentDate in the schema.
        /// </summary>
        [Column(Name = @"paymentDate", Storage = "_PaymentDate", DbType = "DATE NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? PaymentDate
        {
            get
            {
                return this._PaymentDate;
            }
            set
            {
                if (this._PaymentDate != value)
                {
                    this.OnPaymentDateChanging(value);
                    this.SendPropertyChanging("PaymentDate");
                    this._PaymentDate = value;
                    this.SendPropertyChanged("PaymentDate");
                    this.OnPaymentDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TotalPrice in the schema.
        /// </summary>
        [Column(Name = @"totalPrice", Storage = "_TotalPrice", DbType = "FLOAT NULL", UpdateCheck = UpdateCheck.Never)]
        public float? TotalPrice
        {
            get
            {
                return this._TotalPrice;
            }
            set
            {
                if (this._TotalPrice != value)
                {
                    this.OnTotalPriceChanging(value);
                    this.SendPropertyChanging("TotalPrice");
                    this._TotalPrice = value;
                    this.SendPropertyChanged("TotalPrice");
                    this.OnTotalPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Orderr in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Orderr_Payment", Storage="_Orderr", ThisKey="OrderId", OtherKey="Id", IsForeignKey=true)]
        public Orderr Orderr
        {
            get
            {
                return this._Orderr.Entity;
            }
            set
            {
                Orderr previousValue = this._Orderr.Entity;
                if ((previousValue != value) || (this._Orderr.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Orderr");
                    if (previousValue != null)
                    {
                        this._Orderr.Entity = null;
                        previousValue.Payments.Remove(this);
                    }
                    this._Orderr.Entity = value;
                    if (value != null)
                    {
                        this._OrderId = value.Id;
                        value.Payments.Add(this);
                    }
                    else
                    {
                        this._OrderId = default(int?);
                    }
                    this.SendPropertyChanged("Orderr");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Creditcard in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Creditcard_Payment", Storage="_Creditcard", ThisKey="CreaditCardId", OtherKey="Id", IsForeignKey=true)]
        public Creditcard Creditcard
        {
            get
            {
                return this._Creditcard.Entity;
            }
            set
            {
                Creditcard previousValue = this._Creditcard.Entity;
                if ((previousValue != value) || (this._Creditcard.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Creditcard");
                    if (previousValue != null)
                    {
                        this._Creditcard.Entity = null;
                        previousValue.Payments.Remove(this);
                    }
                    this._Creditcard.Entity = value;
                    if (value != null)
                    {
                        this._CreaditCardId = value.Id;
                        value.Payments.Add(this);
                    }
                    else
                    {
                        this._CreaditCardId = default(int?);
                    }
                    this.SendPropertyChanged("Creditcard");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Pbl3Context.Person in the schema.
    /// </summary>
    [Table(Name = @"pbl3.person")]
    public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _Address;

        private string _Email;

        private int _ID;

        private string _Name;

        private int? _Phone;

        private string _Sex;
        #pragma warning restore 0649

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPhoneChanging(int? value);
        partial void OnPhoneChanged();
        partial void OnSexChanging(string value);
        partial void OnSexChanged();
        #endregion

        public Person()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Address in the schema.
        /// </summary>
        [Column(Name = @"address", Storage = "_Address", DbType = "VARCHAR(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if (this._Address != value)
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging("Address");
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Name = @"email", Storage = "_Email", DbType = "VARCHAR(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging("Email");
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging("ID");
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", DbType = "VARCHAR(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Phone in the schema.
        /// </summary>
        [Column(Name = @"phone", Storage = "_Phone", DbType = "INT NULL", UpdateCheck = UpdateCheck.Never)]
        public int? Phone
        {
            get
            {
                return this._Phone;
            }
            set
            {
                if (this._Phone != value)
                {
                    this.OnPhoneChanging(value);
                    this.SendPropertyChanging("Phone");
                    this._Phone = value;
                    this.SendPropertyChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Sex in the schema.
        /// </summary>
        [Column(Name = @"sex", Storage = "_Sex", DbType = "ENUM NULL", UpdateCheck = UpdateCheck.Never)]
        public string Sex
        {
            get
            {
                return this._Sex;
            }
            set
            {
                if (this._Sex != value)
                {
                    this.OnSexChanging(value);
                    this.SendPropertyChanging("Sex");
                    this._Sex = value;
                    this.SendPropertyChanged("Sex");
                    this.OnSexChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Pbl3Context.Product in the schema.
    /// </summary>
    [Table(Name = @"pbl3.product")]
    public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int? _CategoryId;

        private string _Description;

        private int _Id;

        private string _InfoProduct;

        private string _Name;

        private float? _Price;

        private int? _QuantityRemain;

        private string _Status;

        private int? _TrademarkId;
        #pragma warning restore 0649

        private EntitySet<Cartdetail> _Cartdetails;

        private EntitySet<Image> _Images;

        private EntitySet<Orderdetail> _Orderdetails;

        private EntityRef<Category> _Category;

        private EntityRef<Trademark> _Trademark;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCategoryIdChanging(int? value);
        partial void OnCategoryIdChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnInfoProductChanging(string value);
        partial void OnInfoProductChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPriceChanging(float? value);
        partial void OnPriceChanged();
        partial void OnQuantityRemainChanging(int? value);
        partial void OnQuantityRemainChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnTrademarkIdChanging(int? value);
        partial void OnTrademarkIdChanged();
        #endregion

        public Product()
        {
            this._Cartdetails = new EntitySet<Cartdetail>(new Action<Cartdetail>(this.attach_Cartdetails), new Action<Cartdetail>(this.detach_Cartdetails));
            this._Images = new EntitySet<Image>(new Action<Image>(this.attach_Images), new Action<Image>(this.detach_Images));
            this._Orderdetails = new EntitySet<Orderdetail>(new Action<Orderdetail>(this.attach_Orderdetails), new Action<Orderdetail>(this.detach_Orderdetails));
            this._Category  = default(EntityRef<Category>);
            this._Trademark  = default(EntityRef<Trademark>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CategoryId in the schema.
        /// </summary>
        [Column(Name = @"categoryId", Storage = "_CategoryId", DbType = "INT NULL", UpdateCheck = UpdateCheck.Never)]
        public int? CategoryId
        {
            get
            {
                return this._CategoryId;
            }
            set
            {
                if (this._CategoryId != value)
                {
                    if (this._Category.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCategoryIdChanging(value);
                    this.SendPropertyChanging("CategoryId");
                    this._CategoryId = value;
                    this.SendPropertyChanged("CategoryId");
                    this.OnCategoryIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"description", Storage = "_Description", DbType = "VARCHAR(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging("Description");
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InfoProduct in the schema.
        /// </summary>
        [Column(Name = @"infoProduct", Storage = "_InfoProduct", DbType = "VARCHAR(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string InfoProduct
        {
            get
            {
                return this._InfoProduct;
            }
            set
            {
                if (this._InfoProduct != value)
                {
                    this.OnInfoProductChanging(value);
                    this.SendPropertyChanging("InfoProduct");
                    this._InfoProduct = value;
                    this.SendPropertyChanged("InfoProduct");
                    this.OnInfoProductChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", DbType = "VARCHAR(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [Column(Name = @"price", Storage = "_Price", DbType = "FLOAT NULL", UpdateCheck = UpdateCheck.Never)]
        public float? Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging("Price");
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for QuantityRemain in the schema.
        /// </summary>
        [Column(Name = @"quantityRemain", Storage = "_QuantityRemain", DbType = "INT NULL", UpdateCheck = UpdateCheck.Never)]
        public int? QuantityRemain
        {
            get
            {
                return this._QuantityRemain;
            }
            set
            {
                if (this._QuantityRemain != value)
                {
                    this.OnQuantityRemainChanging(value);
                    this.SendPropertyChanging("QuantityRemain");
                    this._QuantityRemain = value;
                    this.SendPropertyChanged("QuantityRemain");
                    this.OnQuantityRemainChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Storage = "_Status", DbType = "ENUM NULL", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TrademarkId in the schema.
        /// </summary>
        [Column(Name = @"trademarkId", Storage = "_TrademarkId", DbType = "INT NULL", UpdateCheck = UpdateCheck.Never)]
        public int? TrademarkId
        {
            get
            {
                return this._TrademarkId;
            }
            set
            {
                if (this._TrademarkId != value)
                {
                    if (this._Trademark.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnTrademarkIdChanging(value);
                    this.SendPropertyChanging("TrademarkId");
                    this._TrademarkId = value;
                    this.SendPropertyChanged("TrademarkId");
                    this.OnTrademarkIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cartdetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Product_Cartdetail", Storage="_Cartdetails", ThisKey="Id", OtherKey="ProductId", DeleteRule="NO ACTION")]
        public EntitySet<Cartdetail> Cartdetails
        {
            get
            {
                return this._Cartdetails;
            }
            set
            {
                this._Cartdetails.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Images in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Product_Image", Storage="_Images", ThisKey="Id", OtherKey="ProductId", DeleteRule="NO ACTION")]
        public EntitySet<Image> Images
        {
            get
            {
                return this._Images;
            }
            set
            {
                this._Images.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Orderdetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Product_Orderdetail", Storage="_Orderdetails", ThisKey="Id", OtherKey="ProductId", DeleteRule="NO ACTION")]
        public EntitySet<Orderdetail> Orderdetails
        {
            get
            {
                return this._Orderdetails;
            }
            set
            {
                this._Orderdetails.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Category in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Category_Product", Storage="_Category", ThisKey="CategoryId", OtherKey="Id", IsForeignKey=true)]
        public Category Category
        {
            get
            {
                return this._Category.Entity;
            }
            set
            {
                Category previousValue = this._Category.Entity;
                if ((previousValue != value) || (this._Category.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Category");
                    if (previousValue != null)
                    {
                        this._Category.Entity = null;
                        previousValue.Products.Remove(this);
                    }
                    this._Category.Entity = value;
                    if (value != null)
                    {
                        this._CategoryId = value.Id;
                        value.Products.Add(this);
                    }
                    else
                    {
                        this._CategoryId = default(int?);
                    }
                    this.SendPropertyChanged("Category");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Trademark in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Trademark_Product", Storage="_Trademark", ThisKey="TrademarkId", OtherKey="Id", IsForeignKey=true)]
        public Trademark Trademark
        {
            get
            {
                return this._Trademark.Entity;
            }
            set
            {
                Trademark previousValue = this._Trademark.Entity;
                if ((previousValue != value) || (this._Trademark.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Trademark");
                    if (previousValue != null)
                    {
                        this._Trademark.Entity = null;
                        previousValue.Products.Remove(this);
                    }
                    this._Trademark.Entity = value;
                    if (value != null)
                    {
                        this._TrademarkId = value.Id;
                        value.Products.Add(this);
                    }
                    else
                    {
                        this._TrademarkId = default(int?);
                    }
                    this.SendPropertyChanged("Trademark");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Cartdetails(Cartdetail entity)
        {
            this.SendPropertyChanging("Cartdetails");
            entity.Product = this;
        }
    
        private void detach_Cartdetails(Cartdetail entity)
        {
            this.SendPropertyChanging("Cartdetails");
            entity.Product = null;
        }

        private void attach_Images(Image entity)
        {
            this.SendPropertyChanging("Images");
            entity.Product = this;
        }
    
        private void detach_Images(Image entity)
        {
            this.SendPropertyChanging("Images");
            entity.Product = null;
        }

        private void attach_Orderdetails(Orderdetail entity)
        {
            this.SendPropertyChanging("Orderdetails");
            entity.Product = this;
        }
    
        private void detach_Orderdetails(Orderdetail entity)
        {
            this.SendPropertyChanging("Orderdetails");
            entity.Product = null;
        }
    }

    /// <summary>
    /// There are no comments for Pbl3Context.Role in the schema.
    /// </summary>
    [Table(Name = @"pbl3.role")]
    public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private string _Value;
        #pragma warning restore 0649

        private EntitySet<User> _Users;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnValueChanging(string value);
        partial void OnValueChanged();
        #endregion

        public Role()
        {
            this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging("ID");
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Value in the schema.
        /// </summary>
        [Column(Name = @"value", Storage = "_Value", DbType = "VARCHAR(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if (this._Value != value)
                {
                    this.OnValueChanging(value);
                    this.SendPropertyChanging("Value");
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Users in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Role_User", Storage="_Users", ThisKey="ID", OtherKey="Idrole", DeleteRule="NO ACTION")]
        public EntitySet<User> Users
        {
            get
            {
                return this._Users;
            }
            set
            {
                this._Users.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Users(User entity)
        {
            this.SendPropertyChanging("Users");
            entity.Role = this;
        }
    
        private void detach_Users(User entity)
        {
            this.SendPropertyChanging("Users");
            entity.Role = null;
        }
    }

    /// <summary>
    /// There are no comments for Pbl3Context.Trademark in the schema.
    /// </summary>
    [Table(Name = @"pbl3.trademark")]
    public partial class Trademark : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _Name;
        #pragma warning restore 0649

        private EntitySet<Product> _Products;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public Trademark()
        {
            this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", DbType = "VARCHAR(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Products in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Trademark_Product", Storage="_Products", ThisKey="Id", OtherKey="TrademarkId", DeleteRule="NO ACTION")]
        public EntitySet<Product> Products
        {
            get
            {
                return this._Products;
            }
            set
            {
                this._Products.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Products(Product entity)
        {
            this.SendPropertyChanging("Products");
            entity.Trademark = this;
        }
    
        private void detach_Products(Product entity)
        {
            this.SendPropertyChanging("Products");
            entity.Trademark = null;
        }
    }

    /// <summary>
    /// There are no comments for Pbl3Context.User in the schema.
    /// </summary>
    [Table(Name = @"pbl3.user")]
    public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _Address;

        private string _Email;

        private int _ID;

        private int? _Idrole;

        private string _Name;

        private string _Password;

        private int? _Phone;

        private string _Sex;

        private string _Status;

        private string _Username;
        #pragma warning restore 0649

        private EntityRef<Cart> _Cart;

        private EntitySet<Orderr> _Orderrs;

        private EntityRef<Role> _Role;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnIdroleChanging(int? value);
        partial void OnIdroleChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnPhoneChanging(int? value);
        partial void OnPhoneChanged();
        partial void OnSexChanging(string value);
        partial void OnSexChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnUsernameChanging(string value);
        partial void OnUsernameChanged();
        #endregion

        public User()
        {
            this._Cart  = default(EntityRef<Cart>);
            this._Orderrs = new EntitySet<Orderr>(new Action<Orderr>(this.attach_Orderrs), new Action<Orderr>(this.detach_Orderrs));
            this._Role  = default(EntityRef<Role>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Address in the schema.
        /// </summary>
        [Column(Name = @"address", Storage = "_Address", DbType = "VARCHAR(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if (this._Address != value)
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging("Address");
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Name = @"email", Storage = "_Email", DbType = "VARCHAR(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging("Email");
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    if (this._Cart.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIDChanging(value);
                    this.SendPropertyChanging("ID");
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Idrole in the schema.
        /// </summary>
        [Column(Storage = "_Idrole", DbType = "INT NULL", UpdateCheck = UpdateCheck.Never)]
        public int? Idrole
        {
            get
            {
                return this._Idrole;
            }
            set
            {
                if (this._Idrole != value)
                {
                    if (this._Role.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdroleChanging(value);
                    this.SendPropertyChanging("Idrole");
                    this._Idrole = value;
                    this.SendPropertyChanged("Idrole");
                    this.OnIdroleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", DbType = "VARCHAR(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Password in the schema.
        /// </summary>
        [Column(Name = @"`password`", Storage = "_Password", DbType = "VARCHAR(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if (this._Password != value)
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging("Password");
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Phone in the schema.
        /// </summary>
        [Column(Name = @"phone", Storage = "_Phone", DbType = "INT NULL", UpdateCheck = UpdateCheck.Never)]
        public int? Phone
        {
            get
            {
                return this._Phone;
            }
            set
            {
                if (this._Phone != value)
                {
                    this.OnPhoneChanging(value);
                    this.SendPropertyChanging("Phone");
                    this._Phone = value;
                    this.SendPropertyChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Sex in the schema.
        /// </summary>
        [Column(Name = @"sex", Storage = "_Sex", DbType = "ENUM NULL", UpdateCheck = UpdateCheck.Never)]
        public string Sex
        {
            get
            {
                return this._Sex;
            }
            set
            {
                if (this._Sex != value)
                {
                    this.OnSexChanging(value);
                    this.SendPropertyChanging("Sex");
                    this._Sex = value;
                    this.SendPropertyChanged("Sex");
                    this.OnSexChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", DbType = "VARCHAR(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Username in the schema.
        /// </summary>
        [Column(Name = @"username", Storage = "_Username", DbType = "VARCHAR(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Username
        {
            get
            {
                return this._Username;
            }
            set
            {
                if (this._Username != value)
                {
                    this.OnUsernameChanging(value);
                    this.SendPropertyChanging("Username");
                    this._Username = value;
                    this.SendPropertyChanged("Username");
                    this.OnUsernameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cart in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_Cart", Storage="_Cart", ThisKey="ID", OtherKey="UserId", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
        public Cart Cart
        {
            get
            {
                return this._Cart.Entity;
            }
            set
            {
                Cart previousValue = this._Cart.Entity;
                if ((previousValue != value) || (this._Cart.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Cart");
                    if (previousValue != null)
                    {
                        this._Cart.Entity = null;
                        previousValue.User = null;
                    }
                    this._Cart.Entity = value;
                    if (value != null)
                    {
                        value.User = this;
                    }
                    this.SendPropertyChanged("Cart");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Orderrs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_Orderr", Storage="_Orderrs", ThisKey="ID", OtherKey="UserId", DeleteRule="NO ACTION")]
        public EntitySet<Orderr> Orderrs
        {
            get
            {
                return this._Orderrs;
            }
            set
            {
                this._Orderrs.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Role in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Role_User", Storage="_Role", ThisKey="Idrole", OtherKey="ID", IsForeignKey=true)]
        public Role Role
        {
            get
            {
                return this._Role.Entity;
            }
            set
            {
                Role previousValue = this._Role.Entity;
                if ((previousValue != value) || (this._Role.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Role");
                    if (previousValue != null)
                    {
                        this._Role.Entity = null;
                        previousValue.Users.Remove(this);
                    }
                    this._Role.Entity = value;
                    if (value != null)
                    {
                        this._Idrole = value.ID;
                        value.Users.Add(this);
                    }
                    else
                    {
                        this._Idrole = default(int?);
                    }
                    this.SendPropertyChanged("Role");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Orderrs(Orderr entity)
        {
            this.SendPropertyChanging("Orderrs");
            entity.User = this;
        }
    
        private void detach_Orderrs(Orderr entity)
        {
            this.SendPropertyChanging("Orderrs");
            entity.User = null;
        }
    }

}
